void uartcom(String serialcommand)
{
  serialcommand.replace("\n", "");
  serialcommand.replace("\r", "");

  if(serialcommand == ""){return;}

  else
  {
    String command = parsing(serialcommand, '|', 0);

    // AT Command, just to check device is connected
    if(command == "at")
    {
      Serial.println(F("OK"));
      return;
    }
    
    // PING
    if(command == "ping")
    {
      String nodeTarget = parsing(serialcommand, '|', 1);

      if(lastDestination == nodeTarget){
        ping(nodeTarget, lastRoute);
        return;
      }

      else
      {
        // del cache
        lastDestination = "";
        lastRoute = "";

        //do rreq
        String response = routeDiscovery(nodeTarget);

        if(response == "201")
        {
          //ping
          Serial.println(F("Please wait a second before send ping message."));
          return;
        }

        Serial.print(F("Cant connect to "));
        Serial.println(nodeTarget);
      }
      return;
    }
    

    // SET ID
    if(command == "set_id")
    {
      String newID = parsing(serialcommand, '|', 1);

      if(newID.length() != 6) 
      {
        Serial.println(F("Error. ID length must be 6 characters"));
        return; 
      }

      for(int i=0; i<6; i++)
      {
        EEPROM.write(i, 0);
        delay(1);
        EEPROM.write(i, newID.charAt(i));
        delay(1);
      }

      Serial.println(F("Device ID has been changed. Please restart your device!"));
      return;
    }

    // READ ID
    if(command == "read_id")
    {
      Serial.println(nodeID);
      return;
    }

    // Read AES Key
    if(command == "read_key")
    {
      String aes_key;
      for(int i=0; i<16; i++){
        aes_key += (char)EEPROM.read(7 + i);
      }
      Serial.println(aes_key);

      for(int i=0; i<11; i++)
      {
          Serial.print(F("KEY "));
          Serial.print(i);
          Serial.print(F(" : "));

        for(int j=0; j<16; j++)
        {
          Serial.print((int)EEPROM.read(23 + j + i*16), HEX);
          Serial.print(F(","));
        }
        Serial.println();
      }
      return;
    }
    
    // RREQ --> ex: rreq|YrCGaw
    if(command == "rreq")
    {
      String nodeTarget = parsing(serialcommand, '|', 1);
      routeDiscovery(nodeTarget);
      return;
    }

    if(command == "msg")
    {
      meshMsg(parsing(serialcommand, '|', 1), parsing(serialcommand, '|', 2), parsing(serialcommand, '|', 3));
      return;
    }


    if(command == "encrypt")
    {

      String inputMessage = parsing(serialcommand, '|', 1);
      encryptAES(inputMessage);
      return;
    }

    if(command == "decrypt")
    {
      String inputMessage = parsing(serialcommand, '|', 1);
      decryptAES(inputMessage);
      return;
    }


    // print route --> ex: print_route
    if(command == "print_route")
    {
      Serial.print(lastDestination);
      Serial.print(F("--"));
      Serial.println(lastRoute);
      return;
    }

    // delete command --> ex: del_route
    if(command == "del_route")
    {
      lastDestination = "";
      lastRoute = "";
      Serial.println(F("Route cache deleted"));
      return;
    }

    if(command == "msgid_his")
    {
      for(int i=0; i<10; i++)
      {
        Serial.println(msgIDHistory[i]);
      }
      return;
    }


/*
    if(command == "save_dsbox")
    {
     const byte d_sbox[256] = {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
                  0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
                  0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
                  0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
                  0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
                  0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
                  0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
                  0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
                  0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
                  0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
                  0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
                  0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
                  0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
                  0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
                  0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
                  0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};      
    
      // from 256 to 511 is d_sbox table
      Serial.println(F("Saving Inverse Sbox table in 256 to 511"));
      for(int i=256; i<=511; i++)
      {        
        EEPROM.update(i, d_sbox[i-256]);
        delay(5);
        Serial.print("EEPROM at adress ");
        Serial.print(i);
        Serial.print(" has value ");
        Serial.println(EEPROM.read(i), HEX);

      } 
      Serial.println(F("Done."));
    }
*/


/*
    if(command == "save_ltable")
    {
      const byte ltable[256]  = {0x00,0x00,0x19,0x01,0x32,0x02,0x1A,0xC6,0x4B,0xC7,0x1B,0x68,0x33,0xEE,0xDF,0x03,
                      0x64,0x04,0xE0,0x0E,0x34,0x8D,0x81,0xEF,0x4C,0x71,0x08,0xC8,0xF8,0x69,0x1C,0xC1,
                      0x7D,0xC2,0x1D,0xB5,0xF9,0xB9,0x27,0x6A,0x4D,0xE4,0xA6,0x72,0x9A,0xC9,0x09,0x78,
                      0x65,0x2F,0x8A,0x05,0x21,0x0F,0xE1,0x24,0x12,0xF0,0x82,0x45,0x35,0x93,0xDA,0x8E,
                      0x96,0x8F,0xDB,0xBD,0x36,0xD0,0xCE,0x94,0x13,0x5C,0xD2,0xF1,0x40,0x46,0x83,0x38,
                      0x66,0xDD,0xFD,0x30,0xBF,0x06,0x8B,0x62,0xB3,0x25,0xE2,0x98,0x22,0x88,0x91,0x10,
                      0x7E,0x6E,0x48,0xC3,0xA3,0xB6,0x1E,0x42,0x3A,0x6B,0x28,0x54,0xFA,0x85,0x3D,0xBA,
                      0x2B,0x79,0x0A,0x15,0x9B,0x9F,0x5E,0xCA,0x4E,0xD4,0xAC,0xE5,0xF3,0x73,0xA7,0x57,
                      0xAF,0x58,0xA8,0x50,0xF4,0xEA,0xD6,0x74,0x4F,0xAE,0xE9,0xD5,0xE7,0xE6,0xAD,0xE8,
                      0x2C,0xD7,0x75,0x7A,0xEB,0x16,0x0B,0xF5,0x59,0xCB,0x5F,0xB0,0x9C,0xA9,0x51,0xA0,
                      0x7F,0x0C,0xF6,0x6F,0x17,0xC4,0x49,0xEC,0xD8,0x43,0x1F,0x2D,0xA4,0x76,0x7B,0xB7,
                      0xCC,0xBB,0x3E,0x5A,0xFB,0x60,0xB1,0x86,0x3B,0x52,0xA1,0x6C,0xAA,0x55,0x29,0x9D,
                      0x97,0xB2,0x87,0x90,0x61,0xBE,0xDC,0xFC,0xBC,0x95,0xCF,0xCD,0x37,0x3F,0x5B,0xD1,
                      0x53,0x39,0x84,0x3C,0x41,0xA2,0x6D,0x47,0x14,0x2A,0x9E,0x5D,0x56,0xF2,0xD3,0xAB,
                      0x44,0x11,0x92,0xD9,0x23,0x20,0x2E,0x89,0xB4,0x7C,0xB8,0x26,0x77,0x99,0xE3,0xA5,
                      0x67,0x4A,0xED,0xDE,0xC5,0x31,0xFE,0x18,0x0D,0x63,0x8C,0x80,0xC0,0xF7,0x70,0x07};

      // from 512 to 767 is L table
      for(int i=512; i<=767; i++)
      {
        EEPROM.update(i, ltable[i-512]);
        delay(5);
        Serial.print(F("EEPROM at adress "));
        Serial.print(i);
        Serial.print(F(" has value "));
        Serial.println(EEPROM.read(i), HEX);
      }  

      Serial.println(F("Done."));
    }
*/


/*
    if(command == "save_etable")
    {
      const byte etable[256]  = {0x01,0x03,0x05,0x0F,0x11,0x33,0x55,0xFF,0x1A,0x2E,0x72,0x96,0xA1,0xF8,0x13,0x35,
                      0x5F,0xE1,0x38,0x48,0xD8,0x73,0x95,0xA4,0xF7,0x02,0x06,0x0A,0x1E,0x22,0x66,0xAA,
                      0xE5,0x34,0x5C,0xE4,0x37,0x59,0xEB,0x26,0x6A,0xBE,0xD9,0x70,0x90,0xAB,0xE6,0x31,
                      0x53,0xF5,0x04,0x0C,0x14,0x3C,0x44,0xCC,0x4F,0xD1,0x68,0xB8,0xD3,0x6E,0xB2,0xCD,
                      0x4C,0xD4,0x67,0xA9,0xE0,0x3B,0x4D,0xD7,0x62,0xA6,0xF1,0x08,0x18,0x28,0x78,0x88,
                      0x83,0x9E,0xB9,0xD0,0x6B,0xBD,0xDC,0x7F,0x81,0x98,0xB3,0xCE,0x49,0xDB,0x76,0x9A,
                      0xB5,0xC4,0x57,0xF9,0x10,0x30,0x50,0xF0,0x0B,0x1D,0x27,0x69,0xBB,0xD6,0x61,0xA3,
                      0xFE,0x19,0x2B,0x7D,0x87,0x92,0xAD,0xEC,0x2F,0x71,0x93,0xAE,0xE9,0x20,0x60,0xA0,
                      0xFB,0x16,0x3A,0x4E,0xD2,0x6D,0xB7,0xC2,0x5D,0xE7,0x32,0x56,0xFA,0x15,0x3F,0x41,
                      0xC3,0x5E,0xE2,0x3D,0x47,0xC9,0x40,0xC0,0x5B,0xED,0x2C,0x74,0x9C,0xBF,0xDA,0x75,
                      0x9F,0xBA,0xD5,0x64,0xAC,0xEF,0x2A,0x7E,0x82,0x9D,0xBC,0xDF,0x7A,0x8E,0x89,0x80,
                      0x9B,0xB6,0xC1,0x58,0xE8,0x23,0x65,0xAF,0xEA,0x25,0x6F,0xB1,0xC8,0x43,0xC5,0x54,
                      0xFC,0x1F,0x21,0x63,0xA5,0xF4,0x07,0x09,0x1B,0x2D,0x77,0x99,0xB0,0xCB,0x46,0xCA,
                      0x45,0xCF,0x4A,0xDE,0x79,0x8B,0x86,0x91,0xA8,0xE3,0x3E,0x42,0xC6,0x51,0xF3,0x0E,
                      0x12,0x36,0x5A,0xEE,0x29,0x7B,0x8D,0x8C,0x8F,0x8A,0x85,0x94,0xA7,0xF2,0x0D,0x17,
                      0x39,0x4B,0xDD,0x7C,0x84,0x97,0xA2,0xFD,0x1C,0x24,0x6C,0xB4,0xC7,0x52,0xF6,0x01};

      // from 768 to 1023 is E table
      for(int i=768; i<=1023; i++)
      {
        EEPROM.update(i, etable[i-768]);
        delay(5);
        Serial.print(F("EEPROM at adress "));
        Serial.print(i);
        Serial.print(F(" has value "));
        Serial.println(EEPROM.read(i), HEX);
      }
      Serial.println(F("Done."));

    }
*/



    /*
    // SET AES KEY
    if(command == "set_key")
    {
      String aes_key = parsing(serialcommand, '|', 1);

      if(aes_key.length() != 16)
      {
        Serial.println(F("Error! Key must be 16 character"));
        return;
      }

      // save to EEPROM
      for(int i=0; i<16; i++)
      {
        EEPROM.write(7 + i, 0);
        delay(1);
        EEPROM.write(7 + i, aes_key.charAt(i));
        delay(1);
      }

      // Calculate key expansion
      Serial.println("Please wait! Generate key expansion");

      // Do expansion key first and save in byte array
      // save w[0], w[1], w[2], and w[3] first
      byte w[44][4] = {{}};                 // to save expansion key w calculation

      Serial.print("EEPROM ADDRESS Start from 7 until ");
      w[0][0] = (int)EEPROM.read(7);
      w[0][1] = (int)EEPROM.read(8);
      w[0][2] = (int)EEPROM.read(9);
      w[0][3] = (int)EEPROM.read(10);

      w[1][0] = (int)EEPROM.read(11);
      w[1][1] = (int)EEPROM.read(12);
      w[1][2] = (int)EEPROM.read(13);
      w[1][3] = (int)EEPROM.read(14);

      w[2][0] = (int)EEPROM.read(15);
      w[2][1] = (int)EEPROM.read(16);
      w[2][2] = (int)EEPROM.read(17);
      w[2][3] = (int)EEPROM.read(18);

      w[3][0] = (int)EEPROM.read(19);
      w[3][1] = (int)EEPROM.read(20);
      w[3][2] = (int)EEPROM.read(21);
      w[3][3] = (int)EEPROM.read(22);

      // doing calculation for w[4] until w[43]
      for(int i=4; i<44; i++)
      {
        // save w[i-1] ke temp
        byte temp_key[4];

        for(int j=0; j<4; j++)
        {
          temp_key[j] = w[i-1][j]; 
        }

        // lakukan fungsi g jika kelipatan 4
        if(i % 4 == 0)
        {
          // geser 1 byte ke kiri
          byte temp = temp_key[0];
          temp_key[0] = temp_key[1];
          temp_key[1] = temp_key[2];
          temp_key[2] = temp_key[3];
          temp_key[3] = temp;

          // substitusi ke s-box
          for(int j=0; j<4; j++){
            temp_key[j] = sbox(temp_key[j]);
          }

          
          // XOR dengan matrix RC, 00, 00, 00
          if(i == 4){temp_key[0] = temp_key[0] ^ 0x01;}
          if(i == 8){temp_key[0] = temp_key[0] ^ 0x02;}
          if(i == 12){temp_key[0] = temp_key[0] ^ 0x04;}
          if(i == 16){temp_key[0] = temp_key[0] ^ 0x08;}
          if(i == 20){temp_key[0] = temp_key[0] ^ 0x10;}
          if(i == 24){temp_key[0] = temp_key[0] ^ 0x20;}
          if(i == 28){temp_key[0] = temp_key[0] ^ 0x40;}
          if(i == 32){temp_key[0] = temp_key[0] ^ 0x80;}
          if(i == 36){temp_key[0] = temp_key[0] ^ 0x1b;}
          if(i == 40){temp_key[0] = temp_key[0] ^ 0x36;}

          // XOR
          for(int j=0; j<4; j++){
            w[i][j] = w[i-4][j] ^ temp_key[j];
          }
        }

        if(i % 4 != 0){
          // XOR only
          for(int j=0; j<4; j++)
          {
            w[i][j] = w[i-1][j] ^ w[i-4][j];
          }
        }
      }

      // Save key Expansion to EEPROM
      for(int x=0; x<44; x++)
      {
        EEPROM.write(23 + (x*4) + 0, 0);
        delay(1);
        EEPROM.write(23 + (x*4) + 0, w[x][0]);
        delay(1);
        EEPROM.write(23 + (x*4) + 1, 0);
        delay(1);
        EEPROM.write(23 + (x*4) + 1, w[x][1]);
        delay(1);
        EEPROM.write(23 + (x*4) + 2, 0);
        delay(1);
        EEPROM.write(23 + (x*4) + 2, w[x][2]);
        delay(1);
        EEPROM.write(23 + (x*4) + 3, 0);
        delay(1);
        EEPROM.write(23 + (x*4) + 3, w[x][3]);
        delay(1);

        if(x==43)
        {
          Serial.println(23 + (x*4) + 3);
        }
      }

      Serial.println(F("AES Encryption key has been changed. Please restart your device!"));
      return;
    }
    */

  }
}
